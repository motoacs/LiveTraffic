TODO
===


Test a bit on OpenGlider to ensure a/c type remains stable
Documentation including README



Notarization

Verify signature:
codesign -vv --display LiveTraffic.xpl

Do it:
xcrun altool --notarize-app --primary-bundle-id "TwinFan.plugin.LiveTraffic" --username "birger@sonux.net" --password "@keychain:ALTOOL_PWD" --file LiveTraffic.zip

Fetch specific information:
xcrun altool --notarization-info ffc483a1-6daf-43e6-9e28-2e371b8902cb -u "birger@sonux.net" -p "@keychain:ALTOOL_PWD"

Get full history:
xcrun altool --notarization-history 0 -u "birger@sonux.net" -p "@keychain:ALTOOL_PWD"

Verify on actual plugin file:
spctl -a -vvv -t install ./LiveTraffic.xpl


ImGui
- Add plane selection to A/C Info

- In Later version reduce ERR_CFG_FILE_MAXWARN to 5 again

Download History
==========
Download counter when providing v2.53: 136.672
Download counter when providing v2.51: 126.069
Download counter when providing v2.50: 122.027
Download counter when providing v2.40: 114.909
Download counter when providing v2.30: 111.890
Download counter when providing v2.20: 107.460
Download counter when providing v2.10: 102.927
Download counter when providing v2.09: 100.534
Download counter when providing v2.08: 97.541
Download counter when providing v2.07: 94.512
Download counter when providing v2.06: 92.974
Download counter when providing v2.05: 88.594
Download counter when providing v2.04: 87.507
Download counter when providing v2.03: 83.161
Download counter when providing v2.02: 80.111
Download counter when providing v2.01: 79.700
Download counter when providing v2.00: 77.048
Download counter when providing v1.52: 76.467
Download counter when providing v1.51: 75.073
Download counter when providing v1.50: 72.486
Download counter when providing v1.24: 64.921
Download counter when providing v1.23: 63.965
Download counter when providing v1.22: 39.778
Download counter when providing v1.21: 36.845
Download counter when providing v1.20: 32.592
Download counter when providing v1.16: 23.480
Download counter when providing v1.15: 21.292
Download counter when providing v1.10: 16.649
Download counter when providing v1.00: 12.192
Download counter when providing v0.94: 10.917

DOCUMENTATION
===========

Acceleration / Deceleration
----------------------------
Also see Deceleration.psd
Correct point to start decelaration tx
Distance travelled and start/target time are given as per flight data
Distance(area) = distance with const initial speed + distance with decelaration
Distance with decelaration has two parts:
1. The area (rectangular) "under" target speed
2. The area (triangular) between target and initial speed

distance traveled = d
initial speed = vi
target speed = vt
delta speed = ∆v = [vt-vi]          // negative in case of deceleration!
initial time = ti
target time = tt
delta time = ∆t = [tt-ti]
time to start deceleration = tx    <-- looking for this value

    d = vi * [tx-ti]  +  (vt * [tt-tx] + (-∆v) * [tt-tx] / 2)
      = vi * ∆t       -  (-∆v) * [tt-tx] / 2    // decel: from entire rectangle=distance remove the triangle not traveled due to deceleration in the top right corner
      = vi * ∆t       +  ∆v * [tt-tx] / 2       // accel: to the rectangle made up of the initial speed add the triangle traveled faster due to acceleration
⇔  d - vi * ∆t   =  ∆v/2 * tt  -  ∆v/2 * tx
⇔  d - vi * ∆t   -  ∆v/2 * tt  =  -∆v/2 * tx
⇔  -2/∆v * (d - vi * ∆t - ∆v/2 * tt)  =  tx
⇔   2/∆v * (-d + vi * ∆t + ∆v/2 * tt)  =  tx
⇔  tx =  2/∆v * (vi * ∆t + ∆v/2 * tt - d)


Extract .dmp file from .rpt:
----------------------------
Open the .rpt file in a good editor. The .dmp file is stored as a huge binary-64-coded block in the tag "dmp_file".
Copy just that huge text (even without the quotation marks!) to a separate file, say "crash.dmp.b64".
On a Windows command line, the following command will decode it:
 certutil.exe -decode crash.dmp.b64 crash.dmp

LIBRARIES
========
libz / zlib - https://zlib.net/zlib_license.html
    Not actually built individually, comes with OS and/or with libpng.

CURL - https://curl.haxx.se/download.html
    Downloaded latest Source Archive

    * Windows *
    Used Visual Studio to open
        projects\Windows\VC15\lib\libcurl.sln
    Built the solution for targets
        'LIB Debug - DLL Windows SSPI' / 'x64':     build\Win64\VC15\LIB Debug - DLL Windows SSPI\libcurld.lib
        'LIB Release - DLL Windows SSPI' / 'x64'    build\Win64\VC15\LIB Release - DLL Windows SSPI\libcurl.lib

    * Mac OS *
    Build using the script MacOSX-Framework64Lib provided here in the docs folder,
    which creates a 64 Bit static library.

libpng - http://www.libpng.org/pub/png/libpng.html
    Download latest Source code

    * Windows *
    Used Visual Studio to open
        projects\vstudio\vstudio.sln
    Built the projects 'zlib' and 'libpng' for targets
        'Debug Library' / 'x64':    projects\vstudio\x64\Debug Library\libpng64.lib     and zlib.lib
        'Release Library' / 'x64':  projects\vstudio\x64\Release Library\libpng64.lib   and zlib.lib

    * Mac OS *
    Used the provided projects/xcode/libpng.xcodeproj,
    changed from shared to static library.

xplanemp - Created my own fork at https://github.com/TwinFan/libxplanemp, which includes
	- processing of VERT_OFFSET commands in xsb_aircraft.txt
	- changes to reduce warnings
	- a CMakeSettings.json file to help the Visual Studio CMake system
    Had to download GL/glext.h and KHR/khrplatform.h from
    https://github.com/KhronosGroup/OpenGL-Registry/tree/master/api/GL
    https://github.com/KhronosGroup/EGL-Registry/tree/master/api/KHR
	and provided it in central include directories

    * Windows *
    Used Visual Studio to open the folder libxplanemp and used the CMake build system.
    Defined following variables in CMakeSettings.json:
	- XPSDK_DIR to point to the XPLM SDK
	- ADDITIONAL_INCLUDES (new with my fork) to point to additional include directories, in my case to where libpng, GL, KHR includes are located

    Built the targets
        'x64-Debug':    build\x64-Debug\xplanemp.lib
        'x64-Release':  build\x64-Release\xplanemp.lib

    * Mac OS *


* Linux (via docker)
# Check the resulting binary for missing symbols
# It is expected that all X-Plane SDK functions are reported as unresolved.
# But no other function should appear:
ldd -r lin.xpl

X-Plane API - Download latest version from https://developer.x-plane.com/sdk/plugin-sdk-downloads/

parson - https://github.com/kgabis/parson
	Download latest version and take over parson.c/.h into the project.
	It is compiled as part of LiveTraffic, not separately.

DEBUGGER
=======
XCode Summary Formats:
positionTy:     lat={$VAR.v.__begin_[0]} lon={$VAR.v.__begin_[1]} alt={$VAR.v.__begin_[2]}m ts={$VAR.v.__begin_[3]} head={$VAR.v.__begin_[4]}
iterator of positionTy:
                lat={$VAR.__ptr_.v.__begin_[0]} lon={$VAR.__ptr_.v.__begin_[1]} alt={$VAR.__ptr_.v.__begin_[2]}m ts={$VAR.__ptr_.v.__begin_[3]} head={$VAR.__ptr_.v.__begin_[4]}
MovingParam:    val={$VAR.val} [{$VAR.valFrom} -> {$VAR.valTo} @ {$VAR.timeTo}]
AccelParam:     {$VAR.currSpeed_m_s}m/s [{$VAR.startSpeed} -> {$VAR.targetSpeed} @ {$VAR.targetTime}]
VectorTy:       angle={$VAR.angle} dist={$VAR.dist} vsi={$VAR.vsi} speed={$VAR.speed}
LTAircraft:     icaoInt = {$VAR.fd.transpIcaoInt}, phase = {$VAR.phase}, {$VAR.speed}kt, {$VAR.vsi}ft/min
FDDynamicData:  head={$VAR.heading} spd={$VAR.spd} vsi={$VAR.vsi} ts={$VAR.ts}
cycleInfo:      simTime={$VAR.simTime}
